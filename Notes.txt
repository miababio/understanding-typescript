- Core Types
    - number (1, 5.3, 10)
        - All numbers no differentiation between integers or floats
    - string
    - boolean
    - object
    - Array
    - Tuple
    - Enum

- Typescript only helps in DEVELOPMENT (before compilation)

- Typescript Types vs Javascript Types
    - Javascript: Dynamic Types
    - Typescript: Static Types

- Type Casing
     - Typescript = using LOWERCASE number, string, and boolean usually

- Working with Tuples
    - Fixed LENGTH and TYPE
        - Ex: [1, 2]
        - role: [2, 'author']
    - Special construct that is only used in Typescript
        - Looks like an array
    - See Example 1
        - role: [number, string];
            - Showing it can take 2 values; a number and a string
            - EXCEPTION: when you  push an element in array, typescript doesn't catch error

- Working with Enums
    - enum Role { ADMIN, READ_ONLY, AUTHOR };
    - automatically enumerated global constant identifiers
    - starts at 0
    - can use any default value you want, number, string, etc

- Union Types
    - See Example 2

- Literal Types
    - function combine(a: number | string, b: number | string, resultConversion: 'as-number' | 'as-text') {...}
        - resultConversion is a literal type; that parameter will ONLY accept either of those two values (a union of options)

- Functions Return Types and "void"
    - function printResult(num: number) {
          console.log('Result: ' + num);
      }
      printResult(add(5, 12));
        - Hover over printResult, and you'll see the function returns the 'void' type
        - 'void' is like C++, etc; returns nothing
        - a little confusing, but console.log(printResult(add(5, 12))); returns 'undefined', even though Typescript returns a 'void' type
        - Use void over undefined when possible

- Functions as Types
    - Function Types: Types that describe a function
    - let combineValues: Function;

      combineValues = add;
      combineValues = printResult; // Still works!
  
      console.log(combineValues(8, 8));

        - If we try logging this out, we get 'Result: 8' and undefined, because although we said that combineValues is of type Function,
          that's all we said, meaning any function is fair game
            - We need to be more specific by describing what type of function we want allowed
                - See Example 3
                    - let combineValues: (<parameters + types>): <return_type>
                        - The name of the parameters doesn't have to match the parameter names in the function it should be matching

- Function Types and Callbacks
    - Works like you'd expect:
        function addAndHandle(n1: number, n2: number, cb: (num: number) => void) {
            const result = n1 + n2;
            cb(result);
        }
        addAndHandle(10, 20, (result) => {
            console.log(result);
        });
    - NOTE: the cb => void doesn't check anything inside the function; meaning you could add a return:
                addAndHandle(10, 20, (result) => {
                    console.log(result);
                    return result;
                });
            and you wouldn't get any errors. That's because when you put void there, it's basically saying
            "We don't care about the return type, since you made it void; it could be something, or nothing at all

- The "unknown" type
    - let userInput: unknown;
      let userName: string;
  
      userInput = 5;
      userInput = 'Mike';
      userName = userInput; // uh oh! doesn't like that!

        - Like 'any', except a little more restricted
            - You can't assign another variable to an 'unknown' variable
                - Even though the unknown variable can be set with different values, the other variable trying to 
                  be assigned to the unknown variable doesn't know what it's supposed to be; it could be anything
                    - 'any' is like Typescripts version of "I give up, do whatever you want", which is why it's the most
                      flexible type in Typescript
                - You can fix this by checking the type first:
                    - if (typeof userInput === 'string') {
                        userName = userInput;
                      }

- The "never" type
    - function generateError(message: string, code: number): never {
          throw {message, errorCode: code};
      }
      generateError('An error occurred!', 500);
        - Signifies that this function NEVER returns anything
            - IF you hover over it is says void, but from a code quality standpoint, this is mor explicit
            - Use Cases: functions that throw Errors, infinite loops


1 - Tuples
==========
const person: {
    name: string;
    age: number;
    hobbies: string[],
    role: [number, string];
} = {
// const person = {
    name: 'Michael',
    age: 27,
    hobbies: ['Sports', 'Cooking'],
    role: [2, 'author']
};

console.log(person);

2 - Unions
==========
function combine(a: number | string, b: number | string) {
    let result;
    if (typeof a === 'number' && typeof b === 'number') {
        result = a + b;
    } else {
        result = a.toString() + b.toString();
    }
    return result;
}

const combinedAges = combine(30, 26);
console.log(combinedAges);

const combinedNames = combine('Max', 'Anna');
console.log(combinedNames);

3 - Function Type
=================
function add(n1: number, n2: number) {
    return n1 + n2;
}

function printResult(num: number) {
    console.log('Result: ' + num);
}

let combineValues: (a: number, b: number) => number;

combineValues = add;
combineValues = printResult; // Doesn't compile now

console.log(combineValues(8, 8));