- "this" keyword
    - See Example 1
        - This gives an error because 'name' is not provided in accountingCopy. It doesn't have all the proper variables needed
          to be considered an instance of Department. A way of fixing this would be to add the name variable to the declaration:
            - Ex: const accountingCopy = { name: 'DUMMY', describe: accounting.describe }

- 'private" and "public" access modifiers
    - private employees: string[] = [];
        - Any method, prop, etc can access the employee variable as long as it's in the CLASS
        - Can't access the variable outside the class
        - Like Java 
            - Ex: accounting.employees[2] = 'Anna' // Can't do anymore! TS throws an error
    - 'public' is the default; no need to add keyword anywhere

- Shorthand Initialization
    - class Department {                                            class Department {
        private name: string;                                           private employees: string[] = [];
        private employees: string[] = [];         ---->                 constructor(private id: string, public name: string) {}
        constructor(n: string) {                                    }
            this.name = n;
        }
    }
    - Just put the access modifier in front of the variable name to initialize it (much quicker)

- "readonly" property
    - private readonly id: string
        - Doesn't allow you to change/write to the variable (kinda like const)
    - Does not exist in Javascript, purely a typescript thing

- Inheritance
    - class ITDepartment extends Department {}
      ...
      const IT = new ITDepartment('d1', 'IT');

        - If you don't provide a constructor in the inherited class, then it will automatically use the base class constructor
          (no super)
        - If you DO provide a constructor, you WILL need to call super!

            - Ex: class ITDepartment extends Department {
                      constructor(id: string) {
                          super(id, 'IT');
                      }
                  }
    - 





                                                                    EXAMPLES
                                                                    --------


Example 1 - Adding extra type safety with 'this'
=========
class Department {
    name: string;

    constructor(n: string) {
        this.name = n;
    }

    describe(this: Department) {
        console.log('Department: ' + this.name);
    }
}

const accounting = new Department('Accounting');
accounting.describe();
const accountingCopy = { describe: accounting.describe }
accountingCopy.describe(); // Ruh-Roh!